import Foundation
import SwiftUI

#if canImport(AppKit)
import AppKit
#endif

#if canImport(UIKit)
import UIKit
#endif

public struct ColorDynamicFileGenerator: Sendable {

    public init() {}

    public func generateCode() -> String {
        var builder = StringBuilder(estimatedSize: 6000)
        let formattedDate = Date().formatted(date: .abbreviated, time: .shortened)
        
        builder.append("// Auto-generated by Sheet â€” do not edit\n")
        builder.append("// Generated on: ")
        builder.append(formattedDate)
        builder.append("\n\n")
        
        builder.append("import SwiftUI\n\n")
        builder.append("#if canImport(AppKit)\n")
        builder.append("import AppKit\n")
        builder.append("#endif\n\n")
        builder.append("#if canImport(UIKit)\n")
        builder.append("import UIKit\n")
        builder.append("#endif\n\n")
        
        // Extension 1: init(any color: Color)
        builder.append("extension Color {\n")
        builder.append("    init(any color: Color) {\n")
        builder.append("        #if canImport(UIKit)\n")
        builder.append("        self.init(uiColor: UIColor(color))\n")
        builder.append("        #else\n")
        builder.append("        self.init(nsColor: NSColor(color))\n")
        builder.append("        #endif\n")
        builder.append("    }\n\n")
        
        builder.append("    #if canImport(UIKit)\n")
        builder.append("    init(any color: UIColor) {\n")
        builder.append("        self.init(uiColor: color)\n")
        builder.append("    }\n")
        builder.append("    #endif\n\n")
        
        builder.append("    #if canImport(AppKit)\n")
        builder.append("    init(any color: NSColor) {\n")
        builder.append("        self.init(nsColor: color)\n")
        builder.append("    }\n")
        builder.append("    #endif\n")
        builder.append("}\n\n")
        
        // Extension 2: init(any: Color, dark: Color)
        builder.append("extension Color {\n")
        builder.append("    init(any: Color, dark: Color) {\n")
        builder.append("        #if canImport(UIKit)\n")
        builder.append("        self.init(any: UIColor(any), dark: UIColor(dark))\n")
        builder.append("        #else\n")
        builder.append("        self.init(any: NSColor(any), dark: NSColor(dark))\n")
        builder.append("        #endif\n")
        builder.append("    }\n\n")
        
        addAnyDarkUIKit(to: &builder)
        addAnyDarkAppKit(to: &builder)
        
        builder.append("}\n\n")
        
        // Extension 3: init(any: Color, light: Color, dark: Color)
        builder.append("extension Color {\n")
        builder.append("    init(any: Color, light: Color, dark: Color) {\n")
        builder.append("        #if canImport(UIKit)\n")
        builder.append("        self.init(any: UIColor(any), light: UIColor(light), dark: UIColor(dark))\n")
        builder.append("        #else\n")
        builder.append("        self.init(any: NSColor(any), light: NSColor(light), dark: NSColor(dark))\n")
        builder.append("        #endif\n")
        builder.append("    }\n\n")
        
        addAnyLightDarkUIKit(to: &builder)
        addAnyLightDarkAppKit(to: &builder)
        
        builder.append("}\n\n")
        
        // Extension 4: init(light: Color, dark: Color)
        builder.append("extension Color {\n")
        builder.append("    init(light: Color, dark: Color) {\n")
        builder.append("        #if canImport(UIKit)\n")
        builder.append("        self.init(light: UIColor(light), dark: UIColor(dark))\n")
        builder.append("        #else\n")
        builder.append("        self.init(light: NSColor(light), dark: NSColor(dark))\n")
        builder.append("        #endif\n")
        builder.append("    }\n\n")
        
        addLightDarkUIKit(to: &builder)
        addLightDarkAppKit(to: &builder)
        
        builder.append("}\n")
        
        return builder.build()
    }
    
    private func addAnyDarkUIKit(to builder: inout StringBuilder) {
        builder.append("    #if canImport(UIKit)\n")
        builder.append("    init(any: UIColor, dark: UIColor) {\n")
        builder.append("        #if os(watchOS)\n")
        builder.append("        self.init(uiColor: dark)\n")
        builder.append("        #else\n")
        builder.append("        self.init(uiColor: UIColor { traits in\n")
        builder.append("            switch traits.userInterfaceStyle {\n")
        builder.append("            case .light, .unspecified:\n")
        builder.append("                return any\n")
        builder.append("            case .dark:\n")
        builder.append("                return dark\n")
        builder.append("            @unknown default:\n")
        builder.append("                assertionFailure(\"Unknown userInterfaceStyle: \\(traits.userInterfaceStyle)\")\n")
        builder.append("                return any\n")
        builder.append("            }\n")
        builder.append("        })\n")
        builder.append("        #endif\n")
        builder.append("    }\n")
        builder.append("    #endif\n\n")
    }
    
    private func addAnyDarkAppKit(to builder: inout StringBuilder) {
        builder.append("    #if canImport(AppKit)\n")
        builder.append("    init(any: NSColor, dark: NSColor) {\n")
        builder.append("        self.init(nsColor: NSColor(name: nil) { appearance in\n")
        builder.append("            switch appearance.name {\n")
        builder.append("            case .aqua,\n")
        builder.append("                 .vibrantLight,\n")
        builder.append("                 .accessibilityHighContrastAqua,\n")
        builder.append("                 .accessibilityHighContrastVibrantLight:\n")
        builder.append("                return any\n")
        builder.append("            case .darkAqua,\n")
        builder.append("                 .vibrantDark,\n")
        builder.append("                 .accessibilityHighContrastDarkAqua,\n")
        builder.append("                 .accessibilityHighContrastVibrantDark:\n")
        builder.append("                return dark\n")
        builder.append("            default:\n")
        builder.append("                assertionFailure(\"Unknown appearance: \\(appearance.name)\")\n")
        builder.append("                return any\n")
        builder.append("            }\n")
        builder.append("        })\n")
        builder.append("    }\n")
        builder.append("    #endif\n\n")
    }
    
    private func addAnyLightDarkUIKit(to builder: inout StringBuilder) {
        builder.append("    #if canImport(UIKit)\n")
        builder.append("    init(any: UIColor, light: UIColor, dark: UIColor) {\n")
        builder.append("        #if os(watchOS)\n")
        builder.append("        self.init(uiColor: dark)\n")
        builder.append("        #else\n")
        builder.append("        self.init(uiColor: UIColor { traits in\n")
        builder.append("            switch traits.userInterfaceStyle {\n")
        builder.append("            case .light:\n")
        builder.append("                return light\n")
        builder.append("            case .dark:\n")
        builder.append("                return dark\n")
        builder.append("            case .unspecified:\n")
        builder.append("                return any\n")
        builder.append("            @unknown default:\n")
        builder.append("                assertionFailure(\"Unknown userInterfaceStyle: \\(traits.userInterfaceStyle)\")\n")
        builder.append("                return any\n")
        builder.append("            }\n")
        builder.append("        })\n")
        builder.append("        #endif\n")
        builder.append("    }\n")
        builder.append("    #endif\n\n")
    }
    
    private func addAnyLightDarkAppKit(to builder: inout StringBuilder) {
        builder.append("    #if canImport(AppKit)\n")
        builder.append("    init(any: NSColor, light: NSColor, dark: NSColor) {\n")
        builder.append("        self.init(nsColor: NSColor(name: nil) { appearance in\n")
        builder.append("            switch appearance.name {\n")
        builder.append("            case .aqua,\n")
        builder.append("                 .vibrantLight,\n")
        builder.append("                 .accessibilityHighContrastAqua,\n")
        builder.append("                 .accessibilityHighContrastVibrantLight:\n")
        builder.append("                return light\n")
        builder.append("            case .darkAqua,\n")
        builder.append("                 .vibrantDark,\n")
        builder.append("                 .accessibilityHighContrastDarkAqua,\n")
        builder.append("                 .accessibilityHighContrastVibrantDark:\n")
        builder.append("                return dark\n")
        builder.append("            default:\n")
        builder.append("                assertionFailure(\"Unknown appearance: \\(appearance.name)\")\n")
        builder.append("                return any\n")
        builder.append("            }\n")
        builder.append("        })\n")
        builder.append("    }\n")
        builder.append("    #endif\n\n")
    }
    
    private func addLightDarkUIKit(to builder: inout StringBuilder) {
        builder.append("    #if canImport(UIKit)\n")
        builder.append("    init(light: UIColor, dark: UIColor) {\n")
        builder.append("        #if os(watchOS)\n")
        builder.append("        self.init(uiColor: dark)\n")
        builder.append("        #else\n")
        builder.append("        self.init(uiColor: UIColor { traits in\n")
        builder.append("            switch traits.userInterfaceStyle {\n")
        builder.append("            case .light, .unspecified:\n")
        builder.append("                return light\n")
        builder.append("            case .dark:\n")
        builder.append("                return dark\n")
        builder.append("            @unknown default:\n")
        builder.append("                assertionFailure(\"Unknown userInterfaceStyle: \\(traits.userInterfaceStyle)\")\n")
        builder.append("                return light\n")
        builder.append("            }\n")
        builder.append("        })\n")
        builder.append("        #endif\n")
        builder.append("    }\n")
        builder.append("    #endif\n\n")
    }
    
    private func addLightDarkAppKit(to builder: inout StringBuilder) {
        builder.append("    #if canImport(AppKit)\n")
        builder.append("    init(light: NSColor, dark: NSColor) {\n")
        builder.append("        self.init(nsColor: NSColor(name: nil) { appearance in\n")
        builder.append("            switch appearance.name {\n")
        builder.append("            case .aqua,\n")
        builder.append("                 .vibrantLight,\n")
        builder.append("                 .accessibilityHighContrastAqua,\n")
        builder.append("                 .accessibilityHighContrastVibrantLight:\n")
        builder.append("                return light\n")
        builder.append("            case .darkAqua,\n")
        builder.append("                 .vibrantDark,\n")
        builder.append("                 .accessibilityHighContrastDarkAqua,\n")
        builder.append("                 .accessibilityHighContrastVibrantDark:\n")
        builder.append("                return dark\n")
        builder.append("            default:\n")
        builder.append("                assertionFailure(\"Unknown appearance: \\(appearance.name)\")\n")
        builder.append("                return light\n")
        builder.append("            }\n")
        builder.append("        })\n")
        builder.append("    }\n")
        builder.append("    #endif\n\n")
    }
}
