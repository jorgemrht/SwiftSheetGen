import Foundation
import SwiftUI

#if canImport(AppKit)
import AppKit
#endif

#if canImport(UIKit)
import UIKit
#endif

public struct ColorDynamicFileGenerator: Sendable {

    public init() {}

    public func generateCode() -> String {
        let code = """
        // Auto-generated by Sheet â€” do not edit
        // Generated on: \(Date().formatted(date: .abbreviated, time: .shortened))

        import SwiftUI

        #if canImport(AppKit)
        import AppKit
        #endif

        #if canImport(UIKit)
        import UIKit
        #endif
        
        extension Color {
            init(any color: Color) {
                #if canImport(UIKit)
                self.init(uiColor: UIColor(color))
                #else
                self.init(nsColor: NSColor(color))
                #endif
            }
            
            #if canImport(UIKit)
            init(any color: UIColor) {
                self.init(uiColor: color)
            }
            #endif
            
            #if canImport(AppKit)
            init(any color: NSColor) {
                self.init(nsColor: color)
            }
            #endif
        }  
          
        extension Color {
            init(any: Color, dark: Color) {
                #if canImport(UIKit)
                self.init(any: UIColor(any), dark: UIColor(dark))
                #else
                self.init(any: NSColor(any), dark: NSColor(dark))
                #endif
            }
        
            #if canImport(UIKit)
            init(any: UIColor, dark: UIColor) {
                #if os(watchOS)
                self.init(uiColor: dark)
                #else
                self.init(uiColor: UIColor { traits in
                    switch traits.userInterfaceStyle {
                    case .light, .unspecified:
                        return any
                    case .dark:
                        return dark
                    @unknown default:
                        assertionFailure("Unknown userInterfaceStyle: \\(traits.userInterfaceStyle)")
                        return any
                    }
                })
                #endif
            }
            #endif
            
            #if canImport(AppKit)
            init(any: NSColor, dark: NSColor) {
                self.init(nsColor: NSColor(name: nil) { appearance in
                    switch appearance.name {
                    case .aqua,
                         .vibrantLight,
                         .accessibilityHighContrastAqua,
                         .accessibilityHighContrastVibrantLight:
                        return any
                    case .darkAqua,
                         .vibrantDark,
                         .accessibilityHighContrastDarkAqua,
                         .accessibilityHighContrastVibrantDark:
                        return dark
                    default:
                        assertionFailure("Unknown appearance: \\(appearance.name)")
                        return any
                    }
                })
            }
            #endif
        }
        
        
        extension Color {
            init(any: Color, light: Color, dark: Color) {
                #if canImport(UIKit)
                self.init(any: UIColor(any), light: UIColor(light), dark: UIColor(dark))
                #else
                self.init(any: NSColor(any), light: NSColor(light), dark: NSColor(dark))
                #endif
            }
        
            #if canImport(UIKit)
            init(any: UIColor, light: UIColor, dark: UIColor) {
                #if os(watchOS)
                self.init(uiColor: dark)
                #else
                self.init(uiColor: UIColor { traits in
                    switch traits.userInterfaceStyle {
                    case .light:
                        return light
                    case .dark:
                        return dark
                    case .unspecified:
                        return any
                    @unknown default:
                        assertionFailure("Unknown userInterfaceStyle: \\(traits.userInterfaceStyle)")
                        return any
                    }
                })
                #endif
            }
            #endif
            
            #if canImport(AppKit)
            init(any: NSColor, light: NSColor, dark: NSColor) {
                self.init(nsColor: NSColor(name: nil) { appearance in
                    switch appearance.name {
                    case .aqua,
                         .vibrantLight,
                         .accessibilityHighContrastAqua,
                         .accessibilityHighContrastVibrantLight:
                        return light
                    case .darkAqua,
                         .vibrantDark,
                         .accessibilityHighContrastDarkAqua,
                         .accessibilityHighContrastVibrantDark:
                        return dark
                    default:
                        assertionFailure("Unknown appearance: \\(appearance.name)")
                        return any
                    }
                })
            }
            #endif
        }           

        extension Color {
            init(light: Color, dark: Color) {
                #if canImport(UIKit)
                self.init(light: UIColor(light), dark: UIColor(dark))
                #else
                self.init(light: NSColor(light), dark: NSColor(dark))
                #endif
            }

            #if canImport(UIKit)
            init(light: UIColor, dark: UIColor) {
                #if os(watchOS)
                self.init(uiColor: dark)
                #else
                self.init(uiColor: UIColor { traits in
                    switch traits.userInterfaceStyle {
                    case .light, .unspecified:
                        return light
                    case .dark:
                        return dark
                    @unknown default:
                        assertionFailure("Unknown userInterfaceStyle: \\(traits.userInterfaceStyle)")
                        return light
                    }
                })
                #endif
            }
            #endif

            #if canImport(AppKit)
            init(light: NSColor, dark: NSColor) {
                self.init(nsColor: NSColor(name: nil) { appearance in
                    switch appearance.name {
                    case .aqua,
                         .vibrantLight,
                         .accessibilityHighContrastAqua,
                         .accessibilityHighContrastVibrantLight:
                        return light
                    case .darkAqua,
                         .vibrantDark,
                         .accessibilityHighContrastDarkAqua,
                         .accessibilityHighContrastVibrantDark:
                        return dark
                    default:
                        assertionFailure("Unknown appearance: \\(appearance.name)")
                        return light
                    }
                })
            }
            #endif
        }
        """
        return code
    }
}
