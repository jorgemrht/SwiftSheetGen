import Testing
import Foundation
@testable import SheetLocalizer

@Suite
struct FileGeneratorTests {
    
    // MARK: - SwiftEnumGenerator Tests
    
    @Test("SwiftEnumGenerator creates comprehensive localization enums with proper structure and methods")
    func swiftEnumGeneratorBasicCodeGeneration() {
        let generator = SwiftEnumGenerator(enumName: "L10n")
        let keys = ["common_app_name_text", "login_title_text", "profile_version_text"]
        
        let code = generator.generateCode(allKeys: keys)
        
        #expect(code.contains("public enum L10n: String, CaseIterable, Sendable"), "Generated enum should have proper declaration with protocols")
        #expect(code.contains("@frozen"), "Generated enum should be marked as frozen for performance")
        #expect(code.contains("import Foundation"), "Generated code should import Foundation")
        #expect(code.contains("import SwiftUI"), "Generated code should import SwiftUI for LocalizedStringKey support")
        
        #expect(code.contains("case commonAppNameText = \"common_app_name_text\""), "Localization keys should be converted to camelCase enum cases")
        #expect(code.contains("case loginTitleText = \"login_title_text\""), "All provided keys should be included as enum cases")
        #expect(code.contains("case profileVersionText = \"profile_version_text\""), "Complex key names should be properly camelCased")
        
        #expect(code.contains("public var localized: String"), "Generated enum should provide basic localized property")
        #expect(code.contains("public func localized(_ args: CVarArg...) -> String"), "Generated enum should support formatted localization with arguments")
        #expect(code.contains("public func localized(bundle: Bundle) -> String"), "Generated enum should support custom bundle localization")
        #expect(code.contains("public var localizedString: LocalizedStringKey"), "Generated enum should provide SwiftUI LocalizedStringKey support")
    }
    
    @Test("SwiftEnumGenerator respects custom enum names for flexible code generation")
    func swiftEnumGeneratorCustomEnumNameSupport() {
        let generator = SwiftEnumGenerator(enumName: "Strings")
        let keys = ["test_key"]
        
        let code = generator.generateCode(allKeys: keys)
        
        #expect(code.contains("public enum Strings: String, CaseIterable, Sendable"), "Custom enum name should be used in generated declaration")
    }
    
    @Test("SwiftEnumGenerator handles empty key sets gracefully while maintaining proper structure")
    func swiftEnumGeneratorEmptyKeysHandling() {
        let generator = SwiftEnumGenerator(enumName: "L10n")
        let keys: [String] = []
        
        let code = generator.generateCode(allKeys: keys)
        
        #expect(code.contains("public enum L10n: String, CaseIterable, Sendable"), "Empty key set should still produce valid enum declaration")
        #expect(code.contains("public var localized: String"), "Empty enum should still include all localization methods for consistency")
    }
    
    @Test("SwiftEnumGenerator includes proper file header with generation metadata and warnings")
    func swiftEnumGeneratorGenerationMetadata() {
        let generator = SwiftEnumGenerator(enumName: "L10n")
        let keys = ["test_key"]
        
        let code = generator.generateCode(allKeys: keys)
        
        #expect(code.contains("Auto-generated by SheetLocalizer"), "Generated file should identify itself as auto-generated")
        #expect(code.contains("Generated on:"), "Generated file should include timestamp for tracking")
        #expect(code.contains("do not edit"), "Generated file should warn against manual editing")
    }
    
    @Test("SwiftEnumGenerator preserves original key values while handling identifier conflicts")
    func swiftEnumGeneratorIdentifierConflictResolution() {
        let generator = SwiftEnumGenerator(enumName: "L10n")
        
        let keys = ["test_key_1", "test.key.1", "test-key-1"]
        let code = generator.generateCode(allKeys: keys)
        
        #expect(code.contains("= \"test_key_1\""), "Original key values should be preserved as enum raw values")
        #expect(code.contains("= \"test.key.1\""), "Keys with dots should maintain original format in raw values")
        #expect(code.contains("= \"test-key-1\""), "Keys with hyphens should maintain original format in raw values")
    }
}