import Foundation
import SwiftUI

public struct ColorFileGenerator: Sendable {

    public init() {}

    public func generateCode(entries: [ColorEntry]) -> String {
        
        var codeComponents: [String] = []
        codeComponents.reserveCapacity(entries.count + 10)
        
        codeComponents.append("""
        // Auto-generated by Sheet â€” do not edit
        // Generated on: \(Date().formatted(date: .abbreviated, time: .shortened))

        import SwiftUI

        #if canImport(AppKit)
        import AppKit
        #endif

        #if canImport(UIKit)
        import UIKit
        #endif

        public extension ShapeStyle where Self == Color {
        """)

        let colorDefinitions = entries.map { entry -> String in
            let safeName = entry.name.replacingOccurrences(of: " ", with: "")
            
            var lightHex: String?
            if let hexString = entry.lightHex?.dropFirst(), let hexValue = UInt(hexString, radix: 16) {
                lightHex = String(format: "0x%X", hexValue)
            }
            
            var darkHex: String?
            if let hexString = entry.darkHex?.dropFirst(), let hexValue = UInt(hexString, radix: 16) {
                darkHex = String(format: "0x%X", hexValue)
            }
            
            var anyHex: String?
            if let hexString = entry.anyHex?.dropFirst(), let hexValue = UInt(hexString, radix: 16) {
                anyHex = String(format: "0x%X", hexValue)
            }

            let colorInitializer: String
            if let any = anyHex, let light = lightHex, let dark = darkHex {
                colorInitializer = ".init(any: .init(hex: \(any)), light: .init(hex: \(light)), dark: .init(hex: \(dark)))"
            } else if let light = lightHex, let dark = darkHex {
                colorInitializer = ".init(light: .init(hex: \(light)), dark: .init(hex: \(dark)))"
            } else if let any = anyHex, let dark = darkHex {
                colorInitializer = ".init(any: .init(hex: \(any)), dark: .init(hex: \(dark)))"
            } else if let any = anyHex {
                colorInitializer = ".init(any: .init(hex: \(any)))"
            } else {
                colorInitializer = ".clear // Fallback for missing hex values"
            }

            return "    static var \(safeName): Color { \(colorInitializer) }"
        }
        
        codeComponents.append(colorDefinitions.joined(separator: "\n"))

        codeComponents.append("""

        }

        public extension Color {
            init(hex: UInt, alpha: Double = 1) {
                self.init(
                    .sRGB,
                    red: Double((hex >> 16) & 0xFF) / 255,
                    green: Double((hex >> 08) & 0xFF) / 255,
                    blue: Double((hex >> 00) & 0xFF) / 255,
                    opacity: alpha
                )
            }
        }

        struct ColorPaletteGrid: View {
            var body: some View {
                ScrollView {
                    LazyVStack(alignment: .leading) {
        """)

        let previewCells = entries.map { entry in
            let safeName = entry.name.replacingOccurrences(of: " ", with: "")
            return "                    ColorCell(name: \"\(entry.name)\", color: .\(safeName))"
        }
        codeComponents.append(previewCells.joined(separator: "\n"))
        
        codeComponents.append("""
                    }
                    .padding()
                }
            }
        }

        struct ColorCell: View {
            let name: String
            let color: Color

            var body: some View {
                ZStack {
                    color
                        .frame(height: 80)
                        .frame(maxWidth: .infinity)
                        .cornerRadius(8)
                        .shadow(radius: 2)

                    Text(name)
                        .font(.caption.bold())
                        .foregroundStyle(Color.white)
                        .shadow(color: .black, radius: 1)
                }
            }
        }

        #Preview {
            HStack(spacing: 0) {
                ColorPaletteGrid()
                    .background(Color(white: 0.95))
                    .colorScheme(.light)
                ColorPaletteGrid()
                    .background(Color(white: 0.1))
                    .colorScheme(.dark)
            }
        }
        """)
        
        return codeComponents.joined(separator: "\n")
    }

}
