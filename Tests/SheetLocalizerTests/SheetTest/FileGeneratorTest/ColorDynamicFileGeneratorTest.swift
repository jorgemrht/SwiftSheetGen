import Testing
import Foundation
@testable import SheetLocalizer

@Suite("ColorDynamicFileGenerator Tests")
struct ColorDynamicFileGeneratorTest {
    
    
    @Test
    func generateDynamicColorCode() {
        let generator = ColorDynamicFileGenerator()
        let result = generator.generateCode()
        
        #expect(!result.isEmpty)
        
        #expect(result.contains("// Auto-generated by Sheet â€” do not edit"))
        #expect(result.contains("// Generated on:"))
        
        #expect(result.contains("import SwiftUI"))
        #expect(result.contains("#if canImport(AppKit)"))
        #expect(result.contains("import AppKit"))
        #expect(result.contains("#if canImport(UIKit)"))
        #expect(result.contains("import UIKit"))
    }
    
    @Test
    func includesAllColorExtensions() {
        let generator = ColorDynamicFileGenerator()
        let result = generator.generateCode()
        
        #expect(result.contains("init(any color: Color)"))
        #expect(result.contains("self.init(uiColor: UIColor(color))"))
        #expect(result.contains("self.init(nsColor: NSColor(color))"))
        
        #expect(result.contains("init(any: Color, dark: Color)"))
        #expect(result.contains("self.init(any: UIColor(any), dark: UIColor(dark))"))
        #expect(result.contains("self.init(any: NSColor(any), dark: NSColor(dark))"))
        
        #expect(result.contains("init(any: Color, light: Color, dark: Color)"))
        #expect(result.contains("self.init(any: UIColor(any), light: UIColor(light), dark: UIColor(dark))"))
        #expect(result.contains("self.init(any: NSColor(any), light: NSColor(light), dark: NSColor(dark))"))
        
        #expect(result.contains("init(light: Color, dark: Color)"))
        #expect(result.contains("self.init(light: UIColor(light), dark: UIColor(dark))"))
        #expect(result.contains("self.init(light: NSColor(light), dark: NSColor(dark))"))
    }
    
    
    @Test
    func includesUIKitDynamicColorSupport() {
        let generator = ColorDynamicFileGenerator()
        let result = generator.generateCode()
        
        #expect(result.contains("init(any: UIColor, dark: UIColor)"))
        #expect(result.contains("UIColor { traits in"))
        #expect(result.contains("traits.userInterfaceStyle"))
        #expect(result.contains("case .light, .unspecified:"))
        #expect(result.contains("case .dark:"))
        #expect(result.contains("@unknown default:"))
        
        #expect(result.contains("init(any: UIColor, light: UIColor, dark: UIColor)"))
        #expect(result.contains("case .light:"))
        #expect(result.contains("return light"))
        #expect(result.contains("case .dark:"))
        #expect(result.contains("return dark"))
        #expect(result.contains("case .unspecified:"))
        #expect(result.contains("return any"))
        
        #expect(result.contains("init(light: UIColor, dark: UIColor)"))
        
        #expect(result.contains("#if os(watchOS)"))
        #expect(result.contains("self.init(uiColor: dark)"))
    }
    
    
    @Test
    func includesAppKitDynamicColorSupport() {
        let generator = ColorDynamicFileGenerator()
        let result = generator.generateCode()
        
        #expect(result.contains("init(any: NSColor, dark: NSColor)"))
        #expect(result.contains("NSColor(name: nil) { appearance in"))
        #expect(result.contains("appearance.name"))
        #expect(result.contains("case .aqua,"))
        #expect(result.contains(".vibrantLight,"))
        #expect(result.contains(".accessibilityHighContrastAqua,"))
        #expect(result.contains(".accessibilityHighContrastVibrantLight:"))
        #expect(result.contains("case .darkAqua,"))
        #expect(result.contains(".vibrantDark,"))
        #expect(result.contains(".accessibilityHighContrastDarkAqua,"))
        #expect(result.contains(".accessibilityHighContrastVibrantDark:"))
        
        #expect(result.contains("init(any: NSColor, light: NSColor, dark: NSColor)"))
        
        #expect(result.contains("init(light: NSColor, dark: NSColor)"))
    }
    
    
    @Test
    func includesErrorHandling() {
        let generator = ColorDynamicFileGenerator()
        let result = generator.generateCode()
        
        #expect(result.contains("assertionFailure(\"Unknown userInterfaceStyle: \\(traits.userInterfaceStyle)\")"))
        
        #expect(result.contains("assertionFailure(\"Unknown appearance: \\(appearance.name)\")"))
        
        #expect(result.contains("default:"))
    }
    
    
    @Test
    func hasProperCodeStructure() {
        let generator = ColorDynamicFileGenerator()
        let result = generator.generateCode()
        
        let extensionCount = result.components(separatedBy: "extension Color").count - 1
        #expect(extensionCount == 4, "Should have exactly 4 Color extensions")
        
        let openBraces = result.components(separatedBy: "{").count - 1
        let closeBraces = result.components(separatedBy: "}").count - 1
        #expect(openBraces == closeBraces, "Braces should be balanced")
        
        #expect(result.contains("    init("))
        #expect(result.contains("        self.init("))
        #expect(result.contains("            case "))
        #expect(result.contains("                return "))
    }
    
    
    @Test
    func includesProperCompilationDirectives() {
        let generator = ColorDynamicFileGenerator()
        let result = generator.generateCode()
        
        #expect(result.contains("#if canImport(UIKit)"))
        #expect(result.contains("#if canImport(AppKit)"))
        #expect(result.contains("#endif"))
        
        #expect(result.contains("#if os(watchOS)"))
        #expect(result.contains("#else"))
        
        let ifDirectives = result.components(separatedBy: "#if").count - 1
        let endifDirectives = result.components(separatedBy: "#endif").count - 1
        #expect(ifDirectives == endifDirectives, "All #if directives should have matching #endif")
    }
    
    
    @Test
    func generatesValidSwiftSyntax() {
        let generator = ColorDynamicFileGenerator()
        let result = generator.generateCode()
        
        #expect(!result.contains("{{"), "Should not contain template placeholders")
        #expect(!result.contains("}}"), "Should not contain template placeholders")
        
        #expect(result.contains("extension Color {"))
        
        #expect(result.contains("init("))
        #expect(result.contains(") {"))
        
        #expect(result.contains("switch "))
        #expect(result.contains("case "))
        #expect(result.contains("return "))
        
        #expect(result.contains("\\("), "Should properly escape interpolation")
    }
    
    
    @Test
    func containsRequiredMethodSignatures() {
        let generator = ColorDynamicFileGenerator()
        let result = generator.generateCode()
        
        let requiredSignatures = [
            "init(any color: Color)",
            "init(any color: UIColor)",
            "init(any color: NSColor)",
            "init(any: Color, dark: Color)",
            "init(any: UIColor, dark: UIColor)",
            "init(any: NSColor, dark: NSColor)",
            "init(any: Color, light: Color, dark: Color)",
            "init(any: UIColor, light: UIColor, dark: UIColor)",
            "init(any: NSColor, light: NSColor, dark: NSColor)",
            "init(light: Color, dark: Color)",
            "init(light: UIColor, dark: UIColor)",
            "init(light: NSColor, dark: NSColor)"
        ]
        
        for signature in requiredSignatures {
            #expect(result.contains(signature), "Should contain signature: \(signature)")
        }
    }
    
    @Test
    func handlesAllAppearanceCases() {
        let generator = ColorDynamicFileGenerator()
        let result = generator.generateCode()
        
        let uikitCases = [".light", ".dark", ".unspecified", "@unknown default"]
        for uikitCase in uikitCases {
            #expect(result.contains(uikitCase), "Should handle UIKit case: \(uikitCase)")
        }
        
        let appkitCases = [
            ".aqua", ".vibrantLight", ".accessibilityHighContrastAqua", 
            ".accessibilityHighContrastVibrantLight", ".darkAqua", 
            ".vibrantDark", ".accessibilityHighContrastDarkAqua", 
            ".accessibilityHighContrastVibrantDark", "default:"
        ]
        for appkitCase in appkitCases {
            #expect(result.contains(appkitCase), "Should handle AppKit case: \(appkitCase)")
        }
    }
}
