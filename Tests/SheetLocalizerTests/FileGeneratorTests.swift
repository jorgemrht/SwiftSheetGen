import Testing
import Foundation
@testable import SheetLocalizer

@Suite
struct FileGeneratorTests {
    
    // MARK: - SwiftEnumGenerator Tests
    
    @Test
    func test_swiftEnumGeneratorBasicGeneration() {
        
        let generator = SwiftEnumGenerator(enumName: "L10n")
        let keys = ["common_app_name_text", "login_title_text", "profile_version_text"]
        
        let code = generator.generateCode(allKeys: keys)
        
        #expect(code.contains("public enum L10n: String, CaseIterable, Sendable"))
        #expect(code.contains("@frozen"))
        #expect(code.contains("import Foundation"))
        #expect(code.contains("import SwiftUI"))
        
        #expect(code.contains("case commonAppNameText = \"common_app_name_text\""))
        #expect(code.contains("case loginTitleText = \"login_title_text\""))
        #expect(code.contains("case profileVersionText = \"profile_version_text\""))
        
        #expect(code.contains("public var localized: String"))
        #expect(code.contains("public func localized(_ args: CVarArg...) -> String"))
        #expect(code.contains("public func localized(bundle: Bundle) -> String"))
        #expect(code.contains("public var localizedString: LocalizedStringKey"))
    }
    
    @Test
    func test_swiftEnumGeneratorCustomEnumName() {
        let generator = SwiftEnumGenerator(enumName: "Strings")
        let keys = ["test_key"]
        
        let code = generator.generateCode(allKeys: keys)
        
        #expect(code.contains("public enum Strings: String, CaseIterable, Sendable"))
    }
    
    @Test
    func test_swiftEnumGeneratorEmptyKeys() {
        let generator = SwiftEnumGenerator(enumName: "L10n")
        let keys: [String] = []
        
        let code = generator.generateCode(allKeys: keys)
        
        #expect(code.contains("public enum L10n: String, CaseIterable, Sendable"))
        // Should still have the methods even with no cases
        #expect(code.contains("public var localized: String"))
    }
    
    @Test
    func test_swiftEnumGeneratorIncludesTimestamp() {
        let generator = SwiftEnumGenerator(enumName: "L10n")
        let keys = ["test_key"]
        
        let code = generator.generateCode(allKeys: keys)
        
        #expect(code.contains("Auto-generated by SheetLocalizer"))
        #expect(code.contains("Generated on:"))
        #expect(code.contains("do not edit"))
    }
    
    @Test
    func test_swiftEnumGeneratorDuplicateIdentifiers() {
        let generator = SwiftEnumGenerator(enumName: "L10n")
        
        // These would sanitize to the same identifier
        let keys = ["test_key_1", "test.key.1", "test-key-1"]
        let code = generator.generateCode(allKeys: keys)
        
        // All should be present with their original raw values
        #expect(code.contains("= \"test_key_1\""))
        #expect(code.contains("= \"test.key.1\""))
        #expect(code.contains("= \"test-key-1\""))
    }
    
    // MARK: - StringsCatalogGenerator Tests
    
    @Test
    func test_stringsCatalogGeneratorBasicGeneration() throws {
        let entries = [
            LocalizationEntry(view: "common", item: "app_name", type: "text", translations: [
                "en": "My App",
                "es": "Mi App"
            ]),
            LocalizationEntry(view: "login", item: "title", type: "text", translations: [
                "en": "Login",
                "es": "Iniciar sesiÃ³n"
            ])
        ]
        
        let data = try StringsCatalogGenerator.generate(
            for: entries,
            sourceLanguage: "en",
            developmentRegion: "en"
        )
        
        let jsonString = String(data: data, encoding: .utf8)!
        
        // Verify JSON structure
        #expect(jsonString.contains("\"sourceLanguage\" : \"en\""))
        #expect(jsonString.contains("\"version\" : \"1.0\""))
        #expect(jsonString.contains("\"common_app_name_text\""))
        #expect(jsonString.contains("\"login_title_text\""))
        #expect(jsonString.contains("\"My App\""))
        #expect(jsonString.contains("\"Mi App\""))
        
        let jsonObject = try JSONSerialization.jsonObject(with: data)
        #expect(jsonObject is [String: Any])
    }
    
    @Test
    func test_stringsCatalogGeneratorEmptyEntries() throws {
        let entries: [LocalizationEntry] = []
        
        let data = try StringsCatalogGenerator.generate(
            for: entries,
            sourceLanguage: "en",
            developmentRegion: "en"
        )
        
        let jsonString = String(data: data, encoding: .utf8)!
        
        #expect(jsonString.contains("\"sourceLanguage\" : \"en\""))
        #expect(jsonString.contains("\"strings\" : {"))
        
        let jsonObject = try JSONSerialization.jsonObject(with: data)
        #expect(jsonObject is [String: Any])
    }
    
    @Test
    func test_stringsCatalogGeneratorMissingTranslations() throws {
        let entries = [
            LocalizationEntry(view: "common", item: "app_name", type: "text", translations: [
                "en": "My App"
                // Missing Spanish translation
            ]),
            LocalizationEntry(view: "login", item: "title", type: "text", translations: [
                "en": "Login",
                "es": "Iniciar sesiÃ³n",
                "fr": "Connexion"
            ])
        ]
        
        let data = try StringsCatalogGenerator.generate(
            for: entries,
            sourceLanguage: "en",
            developmentRegion: "en"
        )
        
        let jsonString = String(data: data, encoding: .utf8)!
        
        #expect(jsonString.contains("\"My App\""))
        #expect(jsonString.contains("\"Login\""))
        #expect(jsonString.contains("\"Connexion\""))
        
        let jsonObject = try JSONSerialization.jsonObject(with: data)
        #expect(jsonObject is [String: Any])
    }
    
    @Test
    func test_stringsCatalogGeneratorSpecialCharacters() throws {
        let entries = [
            LocalizationEntry(view: "test", item: "special", type: "text", translations: [
                "en": "Text with \"quotes\" and newlines\nand unicode: ðŸš€",
                "es": "Texto con comillas \" y sÃ­mbolos especiales: Ã¡Ã©Ã­Ã³Ãº"
            ])
        ]
        
        let data = try StringsCatalogGenerator.generate(
            for: entries,
            sourceLanguage: "en",
            developmentRegion: "en"
        )
        
        let jsonObject = try JSONSerialization.jsonObject(with: data)
        #expect(jsonObject is [String: Any])
        
        let jsonString = String(data: data, encoding: .utf8)!
        #expect(jsonString.contains("ðŸš€"))
        #expect(jsonString.contains("Ã¡Ã©Ã­Ã³Ãº"))
    }
    
    @Test
    func test_stringsCatalogGeneratorKeyFormat() throws {
        let entry = LocalizationEntry(
            view: "profile",
            item: "user_count",
            type: "text",
            translations: ["en": "Users"]
        )
        
        let data = try StringsCatalogGenerator.generate(
            for: [entry],
            sourceLanguage: "en",
            developmentRegion: "en"
        )
        
        let jsonString = String(data: data, encoding: .utf8)!
        
        #expect(jsonString.contains("\"profile_user_count_text\""))
    }
}
