import Foundation

// MARK: - Swift Enum Generator

public struct SwiftEnumGenerator: Sendable {
    
    private let enumName: String
    
    public init(enumName: String) {
        self.enumName = enumName
    }

    // MARK: - Public API

    public func generateCode(allKeys: [String]) -> String {
        let formattedDate = Date().formatted(date: .abbreviated, time: .shortened)
        
        var codeComponents: [String] = []
        codeComponents.reserveCapacity(allKeys.count + 10)
        
        codeComponents.append("""
        // Auto-generated by SheetLocalizer â€” do not edit
        // Generated on: \(formattedDate)
        
        import Foundation
        import SwiftUI
        
        @frozen
        public enum \(enumName): String, CaseIterable, Sendable {
        """)

        let cases = allKeys.map { key in
            let safeIdentifier = generateSafeSwiftIdentifier(from: key)
            return "    case \(safeIdentifier) = \"\(key)\""
        }
        codeComponents.append(cases.joined(separator: "\n"))

        codeComponents.append("""
        
            /// Returns the localized string for this key
            public var localized: String {
                NSLocalizedString(self.rawValue, bundle: .main, comment: "")
            }
            
            /// Returns a formatted localized string with arguments
            public func localized(_ args: CVarArg...) -> String {
                String(format: localized, arguments: args)
            }
            
            /// Returns localized string with specific bundle
            public func localized(bundle: Bundle) -> String {
                NSLocalizedString(self.rawValue, bundle: bundle, comment: "")
            }
            
            /// SwiftUI compatible computed property
            @available(iOS 13.0, macOS 10.15, *)
            public var localizedString: LocalizedStringKey {
                LocalizedStringKey(self.rawValue)
            }
        }
        """)

        return codeComponents.joined(separator: "\n")
    }

    // MARK: - Identifier Sanitization

    private func generateSafeSwiftIdentifier(from key: String) -> String {
        let components = key
            .replacingOccurrences(of: "-", with: "_")
            .components(separatedBy: CharacterSet.alphanumerics.inverted)
            .filter { !$0.isEmpty }

        let camel = components.enumerated().map { idx, comp in
            let lower = comp.lowercased()
            return idx == 0 ? lower : lower.capitalized
        }.joined()

        let prefix = camel.first?.isNumber == true || camel.isEmpty ? "_" : ""
        return prefix + camel
    }
}
